#!/usr/bin/env bash
#set -e
# Log file path
LOG_FILE="/var/log/my-cni.log"

# Try to create the log file if it doesn't exist
if [ ! -f "${LOG_FILE}" ]; then
  touch "${LOG_FILE}" 2>/dev/null
fi

# Read config from stdin
CONFIG=$(cat /dev/stdin)

#Parse configuration
CNI_VERSION=$(echo $CONFIG | /bin/grep -o '"cniVersion": *"[^"]*"' | /bin/grep -o '"[^"]*"$' | /bin/tr -d '"')
if [ -z "$CNI_VERSION" ]; then
 CNI_VERSION="1.0.0"  # Default version
fi

SUBNET=$(echo $CONFIG | /bin/grep -o '"subnet": *"[^"]*"' | /bin/grep -o '"[^"]*"$' | /bin/tr -d '"')
if [ -z "$SUBNET" ]; then
  SUBNET="10.112.0.0/16"  # Default subnet
fi

GATEWAY=$(echo $CONFIG | /bin/grep -o '"gateway": *"[^"]*"' | /bin/grep -o '"[^"]*"$' | /bin/tr -d '"')
if [ -z "$GATEWAY" ]; then
  GATEWAY="10.112.0.1"  # Default gateway
fi

BRIDGE=$(echo $CONFIG | /bin/grep -o '"bridge": *"[^"]*"' | /bin/grep -o '"[^"]*"$' | /bin/tr -d '"')
if [ -z "$BRIDGE" ]; then
  BRIDGE="cni01"  # Default bridge
fi

COMMAND=${CNI_COMMAND}
CONTAINER_ID=${CNI_CONTAINERID}
IFNAME=${CNI_IFNAME:-eth0}
NETNS=$(basename ${CNI_NETNS})

log() {
  STATUS=$1
  MSG=$2
  TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S %Z")
  echo "[${TIMESTAMP}] [${STATUS}] ${MSG}" >> ${LOG_FILE}
}

allocate_ip() {
  # Simple IP allocation - use the container ID hash to create a number
  # In real environments, use proper IPAM plugins
  local octet4=$(echo $CONTAINER_ID | /bin/md5sum | /bin/tr -dc '0-9' | /bin/cut -c1-3)
  octet4=$((octet4 % 250 + 1)) # Ensure it's between 1-250
  
  # Extract first three octets from subnet
  local prefix=$(echo $SUBNET | /bin/cut -d'/' -f1 | /bin/cut -d'.' -f1-3)
  log "INFO" "allocated ${prefix}.${octet4} for container $CONTAINER_ID"
  echo "${prefix}.${octet4}"
}

handle_add() {
# create veth
VETH_HOST="veth$(echo $CONTAINER_ID | cut -c1-8)"
VETH_NETNS=veth_netns
ip link add ${VETH_HOST} type veth peer name ${VETH_NETNS}
if [ $? -eq 0 ]; then
  log "INFO" "created veth pair: $VETH_HOST-$VETH_NETNS"
else
  log "ERROR" "could not create veth pair"
  exit $?
fi

# put one of the veth interfaces into the new network namespace
ip link set ${VETH_NETNS} netns ${NETNS}
if [ $? -eq 0 ]; then
  log "INFO" "added veth $VETH_NETNS to the namespace $NETNS"
else
  log "ERROR" "could not add veth to the namespace"
  exit $?
fi

# assign IP to veth interface inside the new network namespace
IP_VETH_NETNS=$(allocate_ip)
CIDR_VETH_NETNS=${IP_VETH_NETNS}/32
ip -n ${NETNS} addr add ${CIDR_VETH_NETNS} dev ${VETH_NETNS}
if [ $? -eq 0 ]; then
  log "INFO" "assigned $CIDR_VETH_NETNS to the container $CONTAINER_ID"
else
  log "ERROR" "could not assign $CIDR_VETH_NETNS to the container $CONTAINER_ID"
  exit $?
fi

 if ! ip link show ${BRIDGE} &>/dev/null; then
   log "INFO"  "Creating bridge ${BRIDGE}"
   ip link add name ${BRIDGE} type bridge
   ip link set ${BRIDGE} up
   ip addr add ${GATEWAY}/24 dev $BRIDGE
 fi

ip link set $VETH_HOST master $BRIDGE
ip link set $VETH_HOST up

ip -n ${NETNS} link set ${VETH_NETNS} name ${IFNAME}
ip -n ${NETNS} link set ${CNI_IFNAME} up
ip -n ${NETNS} route add ${GATEWAY} dev ${IFNAME}
ip -n ${NETNS} route add default via ${GATEWAY} dev ${IFNAME}

# return a JSON via stdout
RETURN_TEMPLATE='
{
  "cniVersion": "%s",
  "interfaces": [
    {
      "name": "%s",
      "mac": "%s"
    },
    {
      "name": "%s",
      "mac": "%s",
      "sandbox": "%s"
    }
  ],
  "ips": [
    {
      "address": "%s",
      "interface": 1
    }
  ]
}'

MAC_HOST_VETH=$(ip link show ${VETH_HOST} | grep link | awk '{print$2}')
MAC_NETNS_VETH=$(ip -netns $nsname link show ${CNI_IFNAME} | grep link | awk '{print$2}')

RETURN=$(printf "${RETURN_TEMPLATE}" "${CNI_VERSION}" "${VETH_HOST}" "${MAC_HOST_VETH}" "${CNI_IFNAME}" "${mac_netns_veth}" "${CNI_NETNS}" "${CIDR_VETH_NETNS}")
log "INFO" "$RETURN"
echo ${RETURN}
}

handle_del() {
  log "INFO" "Cleaning up networking for $CONTAINER_ID"
  
  # If namespace is gone, nothing to do
  if [ ! -e "$NETNS" ]; then
    log "INFO" "Namespace $NETNS no longer exists"
    exit 0
  fi
  
  # Delete the interface in the namespace (if it exists)
  ip -n $NETNS link del $IFNAME &>/dev/null || true

  log "INFO" "Cleanup complete"
  echo "Cleanup complete"
}

handle_check() {
  checks=()
   if [ ! -e "$NETNS" ]; then
        checks+=('{"type": "network-namespace", "status": "failure", "msg": "Network namespace does not exist"}')
   else
       checks+=('{"type": "network-namespace", "status": "success"}')
   fi

   ip -n "$NETNS" link show >/dev/null 2>&1
   if [ $? -ne 0 ]; then
       checks+=('{"type": "interfaces", "status": "failure", "msg": "Unable to list network interfaces"}')
   else
       checks+=('{"type": "interfaces", "status": "success"}')
   fi

   result=$(printf '%s\n' "${checks[@]}" | jq -s '.')
   
   # Output result
   log "INFO" "{\"result\": $result}"
   echo "{\"result\": $result}"
   exit 0
}

case $COMMAND in
  ADD)
    handle_add
    ;;
  DEL)
    handle_del
    ;;
  CHECK)
    handle_check
    ;;
  GC)
    echo "GC operation not implemented yet"
    exit 1
    ;;
  VERSION)
    echo "{\"cniVersion\":\"$CNI_VERSION\"}"
    ;;
  *)
    echo "Unknown command: $COMMAND"
    exit 1
    ;;
esac
